<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo使用简介</title>
    <url>/2023/05/01/Hexo%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="Hexo的使用"><a href="#Hexo的使用" class="headerlink" title="Hexo的使用"></a>Hexo的使用</h2><h3 id="GitHub-Page"><a href="#GitHub-Page" class="headerlink" title="GitHub Page"></a>GitHub Page</h3><p>Github Page可以方便的部署静态网站，当需要设置个人主页时，可以建立一个新的库，库的名字时<code>username.github.io</code>,其中username是用户的用户名。在库的setting页面上设置setting page,让其source指向master节点。</p>
<span id="more"></span>
<h3 id="创建一个Hexo项目"><a href="#创建一个Hexo项目" class="headerlink" title="创建一个Hexo项目"></a>创建一个Hexo项目</h3><p>Hexo是依赖Webpack的一个框架，因此是依赖Node.js的。当Node.js已经安装后，我们使用<code>npm install -g hexo-cli</code>命令安装hexo脚手架。完成之后，我们可以使用脚手架新建一个Hexo项目。具体的命令为<code>hexo init blog</code>。</p>
<h3 id="Hexo项目的本地运行"><a href="#Hexo项目的本地运行" class="headerlink" title="Hexo项目的本地运行"></a>Hexo项目的本地运行</h3><p>如果想在本地预览Hexo的效果，可以在命令行输入<code>hexo server</code>命令在本地部署网页，这样就可以在本地预览效果。</p>
<h3 id="Hexo的部署"><a href="#Hexo的部署" class="headerlink" title="Hexo的部署"></a>Hexo的部署</h3><p>当拥有了一个Hexo项目之后，我们就可以将他部署到GitHub Page上了。首先，在该项目中使用<code>npm install hexo-deployer-git --save</code>下载git插件，然后，修改项目根目录下的 <code>_config.yml</code> 文件。我们修改该文件末尾的deploy节点信息，具体代码如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">deploy<span class="punctuation">:</span></span><br><span class="line">  type<span class="punctuation">:</span> git</span><br><span class="line">  repository<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//github.com/username/username.github.io.git</span></span><br><span class="line">  branch<span class="punctuation">:</span> master</span><br></pre></td></tr></table></figure>

<p>其中respository表示需要部署的库的地址。branch表示需要上传的代码的分支是master。</p>
<p>将修改之后的配置文件保存之后，我们使用<code>hexo generate</code>或<code>hexo g</code>命令生成静态文件，然后使用<code>hexo deploy</code>命令将文件部署到GitHub上。</p>
<h3 id="更改Blog的主题"><a href="#更改Blog的主题" class="headerlink" title="更改Blog的主题"></a>更改Blog的主题</h3><p><a href="https://hexo.io/themes/">Hexo</a>提供了很多开源的主题，这些主题通过git保存到项目的库中以后可以通过更改_config.yml中<code>theme:</code>项来改变配置。</p>
<h3 id="创建新的页面"><a href="#创建新的页面" class="headerlink" title="创建新的页面"></a>创建新的页面</h3><p>新的页面的创建可以由指令<code>hexo new pagename</code>来创建，创建之后，会自动生成一个md文件。如果需要生成一个新的文件夹，则只需要将命令改写成<code>hexo new page dirname</code>就可以了。对于每一个md文件的头部需要生成一些关键的信息。具体的格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;Hello World&quot;</span><br><span class="line">date: 2022-05-15 10:00:00</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 技术</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> Hexo</span><br><span class="line"><span class="section">- Blog</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>其中tags可以有多个而categories只能有一个。</p>
]]></content>
      <categories>
        <category>index</category>
      </categories>
      <tags>
        <tag>第一个</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex的使用</title>
    <url>/2023/05/01/Latex/</url>
    <content><![CDATA[<h2 id="Latex环境和命令"><a href="#Latex环境和命令" class="headerlink" title="Latex环境和命令"></a>Latex环境和命令</h2><p>$latex{}$ 的命令以\开头，而环境是指用以令一些效果在局部生效，或是生成特殊的文档元素。LATEX 环境</p>
<p>的用法为一对命令 \begin 和 \end</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;⟨environment name⟩&#125;[⟨optional arguments⟩]&#123;⟨mandatory arguments⟩&#125;</span><br><span class="line">…</span><br><span class="line">\end&#123;⟨environment name⟩&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <em>⟨<strong>environment name</strong>⟩</em> 为环境名，\begin 和 \end 中填写的环境名应当一致。类似命令，</p>
<p>{<em>⟨<strong>mandatory arguments</strong>⟩</em>} 和 [<em>⟨<strong>optional arguments</strong>⟩</em>] 为环境所需的必选和可选参数。LATEX 环</p>
<p>境可能需要一个或多个必选&#x2F;可选参数，也可能完全不需要参数。部分环境允许嵌套使用。</p>
<h3 id="Latex源代码结构"><a href="#Latex源代码结构" class="headerlink" title="Latex源代码结构"></a>Latex源代码结构</h3><p>LATEX 源代码以一个 \documentclass 命令作为开头，它指定了文档使用的<strong>文档类</strong>。docu</p>
<p>ment 环境当中的内容是文档正文。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass[⟨options⟩]&#123;⟨class-name⟩&#125;</span><br></pre></td></tr></table></figure>



<p>在 \documentclass 和 \begin{document} 之间的位置称为<strong>导言区</strong>。在导言区中常会使用</p>
<p>\usepackage 命令调用<strong>宏包</strong>，还会进行文档的全局设置。</p>
<p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230424224310764.png" alt="image-20230424224310764"></p>
<h3 id="Latex排版文字"><a href="#Latex排版文字" class="headerlink" title="Latex排版文字"></a>Latex排版文字</h3><p>使用latex排版中文的时候需要引入ctex包，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\usepackage&#123;ctex&#125;</span><br></pre></td></tr></table></figure>

<h2 id="空格和分段"><a href="#空格和分段" class="headerlink" title="空格和分段"></a>空格和分段</h2><p>latex中每行开头的空格无效，一个或多个空格被视为一个空格。可以使用\par命令让文字分段。文末的一个换行符被视为一个空格，但多个换行符被视为一个换行符（对中文无效）</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>latex使用%进行注释，该字符到行末的所有文字都被忽略</p>
<h3 id="字体的设置"><a href="#字体的设置" class="headerlink" title="字体的设置"></a>字体的设置</h3><p>Latex中设置正文字体的时候使用 \setmainfont命令。例如，如果要设置字体为宋体，命令为\setmainfont{Simsun}</p>
<p>在\documentclass[11pt,a4paper]{article}命令中可以设置正文字体大小和使用的纸张大小。</p>
<h3 id="行间距的设置"><a href="#行间距的设置" class="headerlink" title="行间距的设置"></a>行间距的设置</h3><p>Latex中通过引入宏包</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;setspace&#125; <span class="comment">% 加载 setspace 宏包</span></span><br><span class="line"><span class="keyword">\setstretch</span>&#123;1.5&#125; <span class="comment">% 设置行距为1.5倍</span></span><br></pre></td></tr></table></figure>

<p>通过这种方式设置行间距。</p>
<h3 id="设置目录"><a href="#设置目录" class="headerlink" title="设置目录"></a>设置目录</h3><p>通过引入包hyperref然后在文档内容中加入目录，具体代码如下：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;hyperref&#125; <span class="comment">% 引入超链接包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\newpage</span> <span class="comment">% 新页</span></span><br><span class="line"><span class="keyword">\tableofcontents</span> <span class="comment">% 生成目录</span></span><br></pre></td></tr></table></figure>

<p>这样生成的目录可以使用超链接且独占一页。</p>
<h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>可以使用\section{}标签生成一级段落，\subsection{}生成二级段落。 \subsubsection{} 生成三级段落。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>使用</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;</span><br><span class="line"><span class="keyword">\item</span> 表项一</span><br><span class="line"><span class="keyword">\item</span> 表项二</span><br><span class="line">···</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br></pre></td></tr></table></figure>

<p>生成有序列表，使用</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> 表项一</span><br><span class="line"><span class="keyword">\item</span> 表项二</span><br><span class="line">···</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br></pre></td></tr></table></figure>

<p>生成无序列表。如果要将标签数字用括号括起，使用</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;enumitem&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;enumerate&#125;[label=(<span class="keyword">\arabic</span>*)]</span><br><span class="line">    <span class="keyword">\item</span> 第一项内容</span><br><span class="line">    <span class="keyword">\item</span> 第二项内容</span><br><span class="line">    <span class="keyword">\item</span> 第三项内容</span><br><span class="line"><span class="keyword">\end</span>&#123;enumerate&#125;</span><br></pre></td></tr></table></figure>

<p>其中*表示使用括号</p>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>如何需要添加一个公式段落，可以使用</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;<span class="keyword">\label</span>&#123;eq:eq1&#125;</span><br><span class="line">f(x)=a<span class="built_in">^</span>x+b</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure>

<p>其中label标签中定义了公式的引用key，在文章的其他部分可以使用\ref{eq:eq1}来进行引用。</p>
<p>常用的公式符号如下：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>赋值</td>
</tr>
<tr>
<td>&amp;</td>
<td>对齐符号</td>
</tr>
<tr>
<td>+</td>
<td>加法</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除法</td>
</tr>
<tr>
<td>%</td>
<td>取模</td>
</tr>
<tr>
<td>^</td>
<td>指数</td>
</tr>
<tr>
<td>()</td>
<td>括号，用于改变优先级</td>
</tr>
<tr>
<td>{}</td>
<td>大括号，用于组合数学表达式</td>
</tr>
<tr>
<td>[]</td>
<td>中括号，用于表示向量或矩阵</td>
</tr>
<tr>
<td>_</td>
<td>下划线，用于表示下标</td>
</tr>
<tr>
<td>^{}</td>
<td>脚注，用于表示上标</td>
</tr>
<tr>
<td>\sqrt{}</td>
<td>开方</td>
</tr>
<tr>
<td>\frac{}{}</td>
<td>分数</td>
</tr>
<tr>
<td>\sum</td>
<td>求和</td>
</tr>
<tr>
<td>\int</td>
<td>积分</td>
</tr>
<tr>
<td>\lim</td>
<td>极限</td>
</tr>
<tr>
<td>\infty</td>
<td>无穷</td>
</tr>
<tr>
<td>\pm</td>
<td>正负号</td>
</tr>
<tr>
<td>\neq</td>
<td>不等于号</td>
</tr>
<tr>
<td>\leq</td>
<td>小于等于号</td>
</tr>
<tr>
<td>\geq</td>
<td>大于等于号</td>
</tr>
<tr>
<td>\mathop{\max}\limits_{x}</td>
<td>$\mathop{\max}\limits_{x}$</td>
</tr>
</tbody></table>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>如果要插入图片，首先要引入graphicx包，具体的代码如下：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=0.5<span class="keyword">\textwidth</span>]&#123;Figure1.png&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;DeepId模型结构图&#125; <span class="keyword">\label</span>&#123;fig:Figure1&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure>

<p>caption为图片题注，label为引用标签，\centering为设置图片居中</p>
<p>$y^i_{j,k}&#x3D;\mathop{\max}\limits_{0\le m,n&lt;s}{x^i_{j\cdot s+m,k\cdot s+n}}$</p>
<p>$y_j&#x3D;max\big(0,\sum\limits_ix^1_i\cdot w^1_{i,j}+\sum\limits_{i}x^2_i\cdot w^2_{i,j}+b_j\big)$</p>
<p>$y_i&#x3D;\frac{exp(y’<em>i)}{\sum^n</em>{i&#x3D;1}exp(y’_j)}$</p>
<h2 id="文献的引用"><a href="#文献的引用" class="headerlink" title="文献的引用"></a>文献的引用</h2><p>在$Latex$中，通常可以使用BibTeX文件对文件进行引用。BibTex是一个单独的文献引用数据库，其基本的格式是：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">@article<span class="punctuation">&#123;</span>smith01<span class="punctuation">,</span></span><br><span class="line">  author = <span class="string">&quot;John Smith&quot;</span><span class="punctuation">,</span></span><br><span class="line">  title = <span class="string">&quot;A new approach to computer vision&quot;</span><span class="punctuation">,</span></span><br><span class="line">  journal = <span class="string">&quot;IEEE Transactions on Pattern Analysis and Machine Intelligence&quot;</span><span class="punctuation">,</span></span><br><span class="line">  volume = <span class="string">&quot;23&quot;</span><span class="punctuation">,</span></span><br><span class="line">  number = <span class="string">&quot;12&quot;</span><span class="punctuation">,</span></span><br><span class="line">  pages = <span class="string">&quot;1331--1335&quot;</span><span class="punctuation">,</span></span><br><span class="line">  year = <span class="string">&quot;2001&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个例子中的文献条目包括作者、标题、期刊名称、卷、期、页码和年份等信息。</p>
<p>之后可以在LaTeX文档中使用\cite命令引用文献，例如：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">According to Smith <span class="keyword">\cite</span>&#123;smith01&#125;, computer vision is a challenging field.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>之后在LaTeX文档中需要生成文献参考表的位置指定BibTeX文件的位置和样式，例如：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\bibliography</span>&#123;mybibfile&#125;</span><br><span class="line"><span class="keyword">\bibliographystyle</span>&#123;plain&#125;</span><br></pre></td></tr></table></figure>

<p>最后，先使用xelatex编译一遍源文件，然后使用BibTex编译一遍源文件，然后再用xelatex编译一遍源文件就可以生成正确的pdf文件了。</p>
]]></content>
      <categories>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>论文排版工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2023/05/01/Vue/</url>
    <content><![CDATA[<h3 id="导入Vue"><a href="#导入Vue" class="headerlink" title="导入Vue"></a>导入Vue</h3><p>使用语句</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将Vue导入文件中。</p>
<h3 id="创建绑定Vue实例"><a href="#创建绑定Vue实例" class="headerlink" title="创建绑定Vue实例"></a>创建绑定Vue实例</h3><p>在js中创建Vue实例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&quot;Hello World!&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>el为挂载点，表示该Vue的生效范围，其中”#app”表示生效的组件的id为”app”。</p>
<h3 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h3><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230101170617149.png" alt="image-20230101170617149"></p>
<p>段落中的内容会被表达式替换</p>
<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>v-html指令和v-text指令相比，可以将vue中的字符串以html的格式进行渲染。</p>
<h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>v-on指令可以将元素与事件进行绑定</p>
<p>html事件</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/event_onclick.asp">onclick</a></td>
<td align="left">script</td>
<td align="left">元素上发生鼠标点击时触发。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/event_ondblclick.asp">ondblclick</a></td>
<td align="left">script</td>
<td align="left">元素上发生鼠标双击时触发。</td>
</tr>
<tr>
<td align="left">ondrag</td>
<td align="left">script</td>
<td align="left">元素被拖动时运行的脚本。</td>
</tr>
<tr>
<td align="left">ondragend</td>
<td align="left">script</td>
<td align="left">在拖动操作末端运行的脚本。</td>
</tr>
<tr>
<td align="left">ondragenter</td>
<td align="left">script</td>
<td align="left">当元素元素已被拖动到有效拖放区域时运行的脚本。</td>
</tr>
<tr>
<td align="left">ondragleave</td>
<td align="left">script</td>
<td align="left">当元素离开有效拖放目标时运行的脚本。</td>
</tr>
<tr>
<td align="left">ondragover</td>
<td align="left">script</td>
<td align="left">当元素在有效拖放目标上正在被拖动时运行的脚本。</td>
</tr>
<tr>
<td align="left">ondragstart</td>
<td align="left">script</td>
<td align="left">在拖动操作开端运行的脚本。</td>
</tr>
<tr>
<td align="left">ondrop</td>
<td align="left">script</td>
<td align="left">当被拖元素正在被拖放时运行的脚本。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/event_onmousedown.asp">onmousedown</a></td>
<td align="left">script</td>
<td align="left">当元素上按下鼠标按钮时触发。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/event_onmousemove.asp">onmousemove</a></td>
<td align="left">script</td>
<td align="left">当鼠标指针移动到元素上时触发。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/event_onmouseout.asp">onmouseout</a></td>
<td align="left">script</td>
<td align="left">当鼠标指针移出元素时触发。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/event_onmouseover.asp">onmouseover</a></td>
<td align="left">script</td>
<td align="left">当鼠标指针移动到元素上时触发。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/event_onmouseup.asp">onmouseup</a></td>
<td align="left">script</td>
<td align="left">当在元素上释放鼠标按钮时触发。</td>
</tr>
<tr>
<td align="left">onmousewheel</td>
<td align="left">script</td>
<td align="left">当鼠标滚轮正在被滚动时运行的脚本。</td>
</tr>
<tr>
<td align="left">onscroll</td>
<td align="left">script</td>
<td align="left">当元素滚动条被滚动时运行的脚本。</td>
</tr>
</tbody></table>
<p>绑定事件的基本语法如图</p>
<p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230101171907823.png" alt="image-20230101171907823"></p>
<p>当绑定的事件不传参的时候，函数默认有一个传入的参数event，包含了所有的事件信息。其中e.target为触发了事件的组件。</p>
<p>当需要传入参数的时候，为了将事件传入，可以使用$event作为参数之一传入。</p>
<p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230103181121230.png" alt="image-20230103181121230"></p>
<h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230104120759345.png" alt="image-20230104120759345"></p>
<h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230103181602959.png" alt="image-20230103181602959"></p>
<h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>v-bind可以用于绑定元素的属性</p>
<p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230102131405893.png" alt="image-20230102131405893"></p>
<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230102131617651.png" alt="image-20230102131617651"></p>
<p>使用v-for进行列表渲染，具体语法和微信小程序类似</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span>内容是&#123;&#123;item.content&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>v-model可以实现数据的双向绑定，即当绑定的元素改变时，Vue中的值也会改变。</p>
<p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230104121557050.png" alt="image-20230104121557050"></p>
<p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230104122044579.png" alt="image-20230104122044579"></p>
<h3 id="js获取元素和绑定事件"><a href="#js获取元素和绑定事件" class="headerlink" title="js获取元素和绑定事件"></a>js获取元素和绑定事件</h3><p>使用document.getElementById()可以获取某个元素，可以根据获得的该元素在js中改变元素的属性</p>
<h3 id="网页初始化函数"><a href="#网页初始化函数" class="headerlink" title="网页初始化函数"></a>网页初始化函数</h3><p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230102141838661.png" alt="image-20230102141838661"></p>
<p>类似微信小程序中onload函数，是在页面加载的时候执行的</p>
<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>Webpack的使用方法为运行脚本，具体指令为’npm run dev’如果脚本的名称为dev。Webpack的默认输入文件为src&#x2F;index.js；输出路径为dist&#x2F;main.js。如果要改变，就在Webpack.config.js中修改配置</p>
<p><img src="C:\Users\yhm36\AppData\Roaming\Typora\typora-user-images\image-20230103132704930.png" alt="image-20230103132704930"></p>
<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>监听器可以监视某一数值的变化，让程序员可以在数据发生变化的时候进行相应的操作，具体的定义方式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">               msg(newval, old) &#123;</span><br><span class="line">                   console.log(newval, old);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>为了让监听器在一开始就运行，可以将侦听器定义为一个对象，对象名为监视对象，添加immediate属性为true。具体代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">                msg: &#123;</span><br><span class="line">                    handler(newval, old) &#123;</span><br><span class="line">                        console.log(newval)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    immediate: true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>当对象的其中一个属性发生变化时，侦听器不会被触发，为了侦听此类变化，可以将侦听器设置为对象并将其deep属性设置为true。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">                msg: &#123;</span><br><span class="line">                    handler(newval, old) &#123;</span><br><span class="line">                        console.log(newval.info)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    immediate: true,</span><br><span class="line">                    deep: true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>







<h3 id="使用Vue-cli创建项目"><a href="#使用Vue-cli创建项目" class="headerlink" title="使用Vue-cli创建项目"></a>使用Vue-cli创建项目</h3><p>在控制台中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create project-name</span><br></pre></td></tr></table></figure>

<p>就可以创建项目。</p>
<h3 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h3><p>vue组件由三部分构成，分别是&lt;template&gt;  &lt;style&gt;以及&lt;script&gt; 组成。在main.js中引入相应组件并使用render函数进行渲染。具体代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

<p>其中$mount(‘#app’)的作用和定义在Vue构造函数中的el:’#app’相同。</p>
<ul>
<li><p>在vue的template部分中，定义了组件包含的模板部件</p>
</li>
<li><p>在vue的style中包含了组件的样式表</p>
</li>
<li><p>在vue的script中包含了组件脚本，默认的语法为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            msg:&quot;hello&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>其中的data默认为函数，需要定义的数据放在return的元组中。</p>
<p>除此之外，还有methods用于定义方法，还有components用于注册使用的组件。</p>
</li>
<li><p><b>组件的注册和使用</b></p>
<ul>
<li><p>组件在使用之前，要在script中提前import，并在Vue的methods元素中注册，具体代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import lis from &#x27;@/components/elementlist.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            msg:&quot;hello&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    components:&#123;</span><br><span class="line">        lis</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>此时注册的组件为私有组件。如果希望在全局进行注册，则应该在main.js中引入该组件并在Vue.component(‘name’,component)</p>
</li>
<li><p>组件的props属性</p>
<p>为了让组件能够实现自定义其中的某些参数，需要声明某些属性，使用props声明，具体代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>网页设计</tag>
        <tag>前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title>cache实验</title>
    <url>/2023/05/02/cache%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>在csim.c提供的程序框架中，编写实现一个Cache模拟器。</p>
<h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>输入：内存访问轨迹（src\traces子文件夹中的*.trace文件）。 操作：模拟缓存相对内存访问轨迹的命中（hit）&#x2F;缺失行为（miss）。 输出：命中、缺失和（缓存行）脱胎&#x2F;驱除（基于LRU算法）的总数。 完成csim.c文件的结果能够使用命令行参数产生下面的输出结果。 输出形式如下： linux&gt;<code> ./csim -s 4 -E 2 -b 4 -t traces/yi.trace</code> 输出：hits:4 misses:5 evictions:2 即当输入时，你完成的csim.c输出和上述相同的功能(*.trace文件下面有详细信息)。</p>
]]></content>
      <categories>
        <category>华科实验</category>
      </categories>
      <tags>
        <tag>计算机系统结构</tag>
        <tag>cache</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>docker使用笔记</title>
    <url>/2023/05/01/dockernote/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h3 id="搜索-Docker-镜像"><a href="#搜索-Docker-镜像" class="headerlink" title="搜索 Docker 镜像"></a>搜索 Docker 镜像</h3><p>Docker Hub 是 Docker 镜像的官方仓库，可以通过 docker search 命令在 Docker Hub 中搜索需要的镜像。例如，要搜索 Ubuntu 镜像，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search ubuntu</span><br></pre></td></tr></table></figure>



<h3 id="下载-Docker-镜像"><a href="#下载-Docker-镜像" class="headerlink" title="下载 Docker 镜像"></a>下载 Docker 镜像</h3><p>可以使用 docker pull 命令从 Docker Hub 下载需要的镜像。例如，要下载 Ubuntu 18.04 镜像，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>



<h3 id="运行-Docker-容器"><a href="#运行-Docker-容器" class="headerlink" title="运行 Docker 容器"></a>运行 Docker 容器</h3><p>可以使用 docker run 命令运行 Docker 容器。例如，要在 Ubuntu 18.04 镜像上运行一个新的容器，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name mycontainer ubuntu:18.04</span><br></pre></td></tr></table></figure>

<p>该命令中，-it 表示以交互模式运行容器，–name 指定容器名称，ubuntu:18.04 是镜像名称和标签。</p>
<h3 id="查看-Docker-容器"><a href="#查看-Docker-容器" class="headerlink" title="查看 Docker 容器"></a>查看 Docker 容器</h3><p>可以使用 docker ps 命令查看正在运行的容器。例如，要查看正在运行的容器，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>



<h3 id="进入-Docker-容器"><a href="#进入-Docker-容器" class="headerlink" title="进入 Docker 容器"></a>进入 Docker 容器</h3><p>可以使用 docker exec 命令进入正在运行的容器。例如，要进入 mycontainer 容器，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mycontainer /bin/bash</span><br></pre></td></tr></table></figure>

<p>该命令中，-it 表示以交互模式进入容器，mycontainer 是容器名称，&#x2F;bin&#x2F;bash 是要进入的终端程序。</p>
<h3 id="停止-Docker-容器"><a href="#停止-Docker-容器" class="headerlink" title="停止 Docker 容器"></a>停止 Docker 容器</h3><p>可以使用 docker stop 命令停止正在运行的容器。例如，要停止 mycontainer 容器，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop mycontainer</span><br></pre></td></tr></table></figure>



<h3 id="删除-Docker-容器"><a href="#删除-Docker-容器" class="headerlink" title="删除 Docker 容器"></a>删除 Docker 容器</h3><p>可以使用 docker rm 命令删除已停止的容器。例如，要删除 mycontainer 容器，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> mycontainer</span><br></pre></td></tr></table></figure>



<h3 id="docker-Hadoop"><a href="#docker-Hadoop" class="headerlink" title="docker Hadoop"></a>docker Hadoop</h3><ul>
<li>创建集群</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭集群</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>

<ul>
<li>添加文件夹</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir dirname</span><br></pre></td></tr></table></figure>

<ul>
<li>移除文件夹</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -r dirname</span><br></pre></td></tr></table></figure>

<ul>
<li>将外部文件拷贝到容器中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp filepath containerID:path</span><br></pre></td></tr></table></figure>

<ul>
<li>上传文件到hdfs</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put file filepath</span><br></pre></td></tr></table></figure>

<ul>
<li>将文件移动到本地</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get file filepath</span><br></pre></td></tr></table></figure>

<ul>
<li><p>运行样例</p>
<p><img src="/%5Ctypora-user-images%5Cimage-20221029140122971.png" alt="image-20221029140122971"></p>
</li>
</ul>
<p><img src="/%5Ctypora-user-images%5Cimage-20221029140150160.png" alt="image-20221029140150160"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar wordcount /wordcount/input/ /wordcount/output</span><br></pre></td></tr></table></figure>









<h3 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h3><ul>
<li><p>运行指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it apache/spark-py /opt/spark/bin/pyspark</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>graph survey</title>
    <url>/2023/05/01/graphsurvey/</url>
    <content><![CDATA[<h1 id="graph-survey"><a href="#graph-survey" class="headerlink" title="graph survey"></a>graph survey</h1><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><ul>
<li><p>Graph ananalytics mainly includes s graph processing, graph mining, and graph learning.(图像处理，图像挖掘，图学习)</p>
</li>
<li><p>Graph Processing. Conventional grapg algorithms are designed to process graphs iteratively(迭代) until covergence(收敛). (<a href="https://zhuanlan.zhihu.com/p/137561088">PageRank算法</a>，<a href="https://blog.csdn.net/weixin_41579721/article/details/114552443">单源最短路径算法</a>)</p>
<ul>
<li>are based on traversal operations and generally focus on performing linear algebra-like computational operations on the graph.</li>
</ul>
</li>
<li><p>Graph mining. Graph mining aims to discover specific structures or patterns in graphs.</p>
<ul>
<li><p>graph mining technology is an ideal tool for dealing with complex data structures because of its complex data object relationships and rich data presentation. </p>
</li>
<li><p>graph mining can be used to discover structure</p>
<p>content relationships in social media data, to mine</p>
<p>community-dense subgraphs, to extract network motifs or</p>
<p>signifificant subgraphs in protein-protein or gene interaction</p>
<p>networks, to discover 3D motifs in protein structures or</p>
<p>chemical compounds, etc.</p>
</li>
</ul>
</li>
<li><p>Graph learning. </p>
<ul>
<li>graphs can characterize the relationships between everything.</li>
<li>Graph neural networks establish a deep learning framework for non-Euclidean spatial data, and compared to traditional network representation learning, it is able to perform deeper information aggregation operations on graph structures than traditional network representation learning models.（图神经网络为非欧几里得空间数据建立了深度学习框架，与传统的网络表示学习相比，它能够比传统的网络表示学习模型对图结构执行更深入的信息聚合作。）</li>
</ul>
</li>
</ul>
<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><ul>
<li><p>graph  Terminology</p>
<ul>
<li>The formula for a graph is G &#x3D;(V,E), where V stands for the vertex set and E for the edge set.  Each vertex and each edge has its attribute value at the same time.</li>
</ul>
</li>
<li><p>Domain-Specifific Architecture Types for Graph Analytics.</p>
<p>FPGA-Based Architecture.</p>
<ul>
<li><p>consists various types of programmable resources, which enables developers to rapidly prototype application-specifific accelerators using dedicated hardware description languages and reconfigure these accelerators as often as needed. (使开发人员能够使用专用的硬件描述语言快速地原型化特定于应用程序的加速器，并根据需要经常重新配置这些加速器。)</p>
</li>
<li><p>offer reconfifigurability at the expense of lowered</p>
<p>clock frequencies, which is about 10 × lower than that of</p>
<p>CPUs(降低了时钟的频率)</p>
</li>
</ul>
</li>
</ul>
<h2 id="Software-Systems-Implementation-for-Graph-Analytics"><a href="#Software-Systems-Implementation-for-Graph-Analytics" class="headerlink" title="Software Systems Implementation for Graph Analytics"></a>Software Systems Implementation for Graph Analytics</h2><h3 id="Software-Graph-Processing-Systems"><a href="#Software-Graph-Processing-Systems" class="headerlink" title="Software Graph Processing Systems"></a>Software Graph Processing Systems</h3><ul>
<li><p>can be classifified into two main categories: single-machine graph processing systems and distributed graph processing systems.</p>
</li>
<li><p>According to whether the graph data can be stored in memory during processing, these systems can be divided into in-memory graph processing systems and out-of-core graph processing systems.</p>
</li>
<li><p>Single-Machine Graph Processing Systems. </p>
<ul>
<li>Single machine graph processing systems can fully exploit the ability of a single machine to handle graph computation tasks and avoid the expensive network communication overhead in distributed systems. </li>
<li>统受到固定的硬件资源的限制，无法实现良好的可伸缩性，并且处理时间通常与图形数据的大小成正比。</li>
<li>Single-machine in-memory graph processing systems often have multiple cores and support very large memory of more than 1 TB, allowing them to handle graph data with hundreds of billions of edges.  However, single shared memory systems can only scale by increasing the number of CPUs or expanding the memory size.</li>
<li>Ligra is a lightweight shared memory-based single machine graph processing system, which provides programming abstraction based on edgeMap function, vertexMap function, and vertexSubset type, simplifying the writing of graph processing algorithms.</li>
<li>The key idea of Galois [85] single-machine graph processing system is to fully exploit the benefifits of autonomous scheduling in a data-driven computing mode.</li>
</ul>
</li>
<li><p>Distributed Graph Processing Systems.</p>
<ul>
<li>A distributed graph computing system consists of multiple computing nodes, each of which has its own memory and external memory. Therefore, compared to single-machine graph computing systems, distributed graph processing systems are less limited by hardware in terms of scalability.</li>
<li>设计一个合适的数据划分策略是一个挑战。同时，计算节点之间的通信成为性能的瓶颈</li>
</ul>
</li>
</ul>
<h3 id="Software-Graph-Mining-Systems"><a href="#Software-Graph-Mining-Systems" class="headerlink" title="Software Graph Mining Systems"></a>Software Graph Mining Systems</h3><ul>
<li><p>They search for subgraphs that satisfy the conditions of the algorithm in the input graph G. The process of finding subgraphs can be modeled with a search tree where each node represents a subgraph, and the subgraphs at the k+1 level are expanded from the subgraphs at the k level.</p>
<p><img src="/images/image-20230312162325702.png" alt="image-20230312162325702"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>图神经网络</category>
      </categories>
      <tags>
        <tag>图学习</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>html-CSS学习笔记</title>
    <url>/2023/05/01/html-css/</url>
    <content><![CDATA[<h2 id="html常用标签"><a href="#html常用标签" class="headerlink" title="html常用标签"></a>html常用标签</h2><h4 id="1-标题标签-lt-h1-gt-lt-h6-gt"><a href="#1-标题标签-lt-h1-gt-lt-h6-gt" class="headerlink" title="1.标题标签 &lt;h1&gt;-&lt;h6&gt; ####"></a>1.标题标签 &lt;h1&gt;-&lt;h6&gt; ####</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    二级标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-段落标签和换行标签"><a href="#2-段落标签和换行标签" class="headerlink" title="2.段落标签和换行标签"></a>2.段落标签和换行标签</h4><p>在html中，&lt;p&gt;标签用于定义段落，可以将网页分为若干段。&lt;br&#x2F;&gt;为换行标签，是一个单标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    段落标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">反对法地方<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-文本格式化标签"><a href="#3-文本格式化标签" class="headerlink" title="3.文本格式化标签"></a>3.文本格式化标签</h4><table>
<thead>
<tr>
<th align="center">语义</th>
<th>标签</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>加粗</strong></td>
<td><strong></strong></td>
</tr>
<tr>
<td align="center"><em>倾斜</em></td>
<td><em></em></td>
</tr>
<tr>
<td align="center"><del>删除线</del></td>
<td><del></del></td>
</tr>
<tr>
<td align="center"><u>下划线</u></td>
<td><ins></ins></td>
</tr>
</tbody></table>
<h4 id="4-lt-div-gt-与-lt-span-gt-标签"><a href="#4-lt-div-gt-与-lt-span-gt-标签" class="headerlink" title="4.&lt;div&gt;与&lt;span&gt;标签"></a>4.&lt;div&gt;与&lt;span&gt;标签</h4><p>相当于一个容器，用于布局。其中div标签一个占一行，而span一行可以放多个</p>
<h4 id="5-图像标签的使用"><a href="#5-图像标签的使用" class="headerlink" title="5.图像标签的使用"></a>5.图像标签的使用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片的url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>图像标签的属性有：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>图片路径</td>
<td>必须属性</td>
</tr>
<tr>
<td>alt</td>
<td>文本</td>
<td>图像不显示时的替换文字</td>
</tr>
<tr>
<td>title</td>
<td>文本</td>
<td>提示文本，鼠标放上去时显示的文字</td>
</tr>
<tr>
<td>width</td>
<td>像素</td>
<td>图像宽度</td>
</tr>
<tr>
<td>height</td>
<td>像素</td>
<td>图像高度</td>
</tr>
<tr>
<td>border</td>
<td>像素</td>
<td>图像边框</td>
</tr>
</tbody></table>
<p>&#x3D;&#x3D;图片相对路径为图片相对于html文件的路径，分为同一级、下一级（&#x2F;)、上一级（..&#x2F;）&#x3D;&#x3D;</p>
<h4 id="6-插入链接标签"><a href="#6-插入链接标签" class="headerlink" title="6.插入链接标签"></a>6.插入链接标签</h4><p>链接标签符号为<a>,包含的属性为：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>href</td>
<td>指定链接目标的url地址。如果为外部链接，必须以http:&#x2F;&#x2F;开头</td>
</tr>
<tr>
<td>target</td>
<td>用于指定链接页面的打开方式，其中_self为默认值，__blank为在新窗口中打开方式</td>
</tr>
</tbody></table>
<p>可以在<!--<a href="">添加图片文字等组件</a>--></p>
<p>如果href&#x3D;”#” 表示是空链接，如果链接指向一个.exe或.zip则是一个下载链接</p>
<p><strong>锚点链接</strong>：在链接的href中设置属性值为“#name”，在需要跳转的标签位置添加id属性。如<h3 id="name"></p>
<h4 id="7-特殊字符"><a href="#7-特殊字符" class="headerlink" title="7.特殊字符"></a>7.特殊字符</h4><table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">描述</th>
<th align="center">符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">空格</td>
<td align="center">&amp;nbsp;</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">&amp;lt;</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">&amp;gt;</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center"></td>
<td align="center">&amp;amp;</td>
</tr>
<tr>
<td align="center">&amp;yen;</td>
<td align="center"></td>
<td align="center">&amp;yen;</td>
</tr>
<tr>
<td align="center">&amp;copy;</td>
<td align="center">版权</td>
<td align="center">&amp;copy;</td>
</tr>
<tr>
<td align="center">&amp;reg;</td>
<td align="center">注册版权</td>
<td align="center">&amp;reg;</td>
</tr>
<tr>
<td align="center">&amp;deg;</td>
<td align="center">摄氏度</td>
<td align="center">&amp;deg;</td>
</tr>
<tr>
<td align="center">&amp;plusmn;</td>
<td align="center">正负号</td>
<td align="center">&amp;plusmn;</td>
</tr>
<tr>
<td align="center">&amp;times;</td>
<td align="center">乘</td>
<td align="center">&amp;times;</td>
</tr>
<tr>
<td align="center">&amp;divide;</td>
<td align="center">除</td>
<td align="center">&amp;divide;</td>
</tr>
<tr>
<td align="center">&amp;sup2;</td>
<td align="center">平方</td>
<td align="center">&amp;sup2;</td>
</tr>
<tr>
<td align="center">&amp;sup3;</td>
<td align="center">立方</td>
<td align="center">&amp;sup3;</td>
</tr>
</tbody></table>
<h4 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h4><p>表格用于展示数据，可以使数据非常整洁</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表格基本语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 &lt;table&gt; 用于定义表格；&lt;tr&gt;用于定义行；&lt;td&gt;用于定义表格的单元格</p>
<p>&lt;th&gt;为表头标签。所有的表头可以用&lt;thead&gt;包住，内容由&lt;tbody&gt;包住。</p>
<p>单元格的删除：在目标单元格&lt;td colspan&#x3D;”2”&gt;表示从该单元格开始跨列合并2个单元格。跨行合并为rowspan。</p>
<h4 id="9-列表"><a href="#9-列表" class="headerlink" title="9.列表"></a>9.列表</h4><p>列表的特点使整洁、整洁、有序，它可以用于页面布局</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--无序列表，&lt;ul&gt;内只能有&lt;li&gt;标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&lt;li&gt;标签内可以放任何元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--ol为有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dl为自定义列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词一<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词一解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词一解释二<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-表单标签"><a href="#10-表单标签" class="headerlink" title="10.表单标签"></a>10.表单标签</h4><p>表单由表单域、表单控件、提示信息组成</p>
<p>输入组件为&lt;input type&#x3D;””&#x2F;&gt;是一个单组件。type可以是text；如果是”password”则可以输入密码。</p>
<p>单选按钮为&lt;input type&#x3D;”radio”&gt; checkbox为复选框。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>/&gt;</span> 女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>rdt</title>
    <url>/2023/05/01/rdt/</url>
    <content><![CDATA[<h1 id="RDT实验"><a href="#RDT实验" class="headerlink" title="RDT实验"></a>RDT实验</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GBNReceiver</span> :<span class="keyword">public</span> RdtReceiver</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> expectSequenceNumberRcvd;	<span class="comment">// 期待收到的下一个报文序号</span></span><br><span class="line">	<span class="type">int</span> seqlen;                     <span class="comment">//序号宽度</span></span><br><span class="line">	Packet lastAckPkt;				<span class="comment">//上次发送的确认报文</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GBNSender</span> :<span class="keyword">public</span> RdtSender</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> expectSequenceNumberSend;	<span class="comment">// 下一个发送序号 </span></span><br><span class="line">	<span class="type">bool</span> waitingState;				<span class="comment">// 是否处于等待Ack的状态</span></span><br><span class="line">	<span class="type">int</span> base;                       <span class="comment">//当前窗口基序号</span></span><br><span class="line">	<span class="type">int</span> winlen;                     <span class="comment">//窗口大小</span></span><br><span class="line">	<span class="type">int</span> seqlen;                     <span class="comment">//序号宽度</span></span><br><span class="line">	deque&lt;Packet&gt; window;           <span class="comment">//窗口队列</span></span><br><span class="line">	Packet packetWaitingAck;		<span class="comment">//已发送并等待Ack的数据包</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>  <span class="title class_">Packet</span> &#123;</span><br><span class="line">	<span class="type">int</span> seqnum;										<span class="comment">//序号 发送方发送报文的序号</span></span><br><span class="line">	<span class="type">int</span> acknum;										<span class="comment">//确认号 接收端发送给发送端的确认序号</span></span><br><span class="line">	<span class="type">int</span> checksum;									<span class="comment">//校验和</span></span><br><span class="line">	<span class="type">char</span> payload[Configuration::PAYLOAD_SIZE];		<span class="comment">//payload 装载的数据</span></span><br><span class="line">	</span><br></pre></td></tr></table></figure>



<h3 id="GBN协议"><a href="#GBN协议" class="headerlink" title="GBN协议"></a>GBN协议</h3><p><img src="/%5Ctypora-user-images%5Cimage-20221112172024646.png" alt="image-20221112172024646"></p>
<ul>
<li>不等发送方收到确认报文，就继续发送下一组报文。可以连续发送的数量为窗口的大小。</li>
<li>如果接受方收到的报文序号和预期序号不同，则发送上一次的确认报文；否则发送新的确认报文</li>
<li>如果发送方收到的确认帧在等待确认的数据帧中，则默认该帧及以前的帧都已经收到了，窗口继续滑动。</li>
</ul>
]]></content>
      <tags>
        <tag>计算机通信与网络</tag>
        <tag>华科实验</tag>
      </tags>
  </entry>
  <entry>
    <title>sql笔记</title>
    <url>/2023/05/01/sql/</url>
    <content><![CDATA[<h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><ul>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database dbname</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tablename(</span><br><span class="line">deptNo <span class="type">int</span> <span class="keyword">primary</span> key,  #<span class="keyword">primary</span> key为主键，主键的值是唯一的</span><br><span class="line">deptName <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建外码约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#表级外码约束可以直接在创建表的时候定义，一般开头为FK_</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">deptNo <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">deptName <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> staff(</span><br><span class="line">staffNo <span class="type">INT</span> <span class="keyword">primary</span> key, </span><br><span class="line">staffName <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">dob <span class="type">date</span>,</span><br><span class="line">Salary <span class="type">numeric</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">deptNo <span class="type">int</span>,</span><br><span class="line">#定义外码约束</span><br><span class="line"><span class="keyword">constraint</span> FK_staff_deptNo <span class="keyword">foreign</span> key(deptNo) <span class="keyword">references</span> dept(deptNo)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建CHECK约束</p>
<p>只有在CHECK的表达式为TRUE时数据插入才有效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#当需要命名约束的名称时</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> chk_Person <span class="keyword">CHECK</span> (P_Id<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">AND</span> City<span class="operator">=</span><span class="string">&#x27;Sandnes&#x27;</span>)</span><br><span class="line">);</span><br><span class="line">#当表已经创建后，需要添加约束时</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> chk_Person <span class="keyword">CHECK</span> (P_Id<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">AND</span> City<span class="operator">=</span><span class="string">&#x27;Sandnes&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建default约束</p>
<p>default约束用于向列中加入默认值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;Sandnes&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#<span class="keyword">default</span>也可以使用函数插入系统值</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">    O_Id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    OrderNo <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    P_Id <span class="type">int</span>,</span><br><span class="line">    OrderDate <span class="type">date</span> <span class="keyword">DEFAULT</span> GETDATE()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#创建表后加入<span class="keyword">default</span>约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> ab_c <span class="keyword">DEFAULT</span> <span class="string">&#x27;SANDNES&#x27;</span> <span class="keyword">for</span> City</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#撤销<span class="keyword">default</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> City <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>UNIQUE约束</p>
<p>UNIQUE约束和主键约束类似，但是可以允许为NULL。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department(</span><br><span class="line">  dno <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">primary</span> key,</span><br><span class="line">  dname <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>


</li>
<li><p>插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br><span class="line"></span><br><span class="line">#也可以指定插入的列</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1,column2,column3,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br><span class="line"></span><br><span class="line">#如需命名 <span class="keyword">UNIQUE</span> 约束，并定义多个列的 <span class="keyword">UNIQUE</span> 约束，请使用下面的 <span class="keyword">SQL</span> 语法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> uc_PersonID <span class="keyword">UNIQUE</span> (P_Id,LastName)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#当表已被创建时，如需在 &quot;P_Id&quot; 列创建 <span class="keyword">UNIQUE</span> 约束，请使用下面的 <span class="keyword">SQL</span>:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uc_PersonID <span class="keyword">UNIQUE</span> (P_Id,LastName)</span><br><span class="line"></span><br><span class="line">#如需撤销 <span class="keyword">UNIQUE</span> 约束，请使用下面的 <span class="keyword">SQL</span>：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> uc_PersonID</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> table_name</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改表的内容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name</span><br><span class="line"></span><br><span class="line">  <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] 列名 数据类型 [列约束]</span><br><span class="line">       [<span class="keyword">FIRST</span> <span class="operator">|</span> AFTER col_name]</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">ADD</span> &#123;INDEX<span class="operator">|</span>KEY&#125; [索引名] [类型] (列<span class="number">1</span>,...) </span><br><span class="line">  <span class="operator">|</span> <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [约束名]] 主码约束</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [约束名]] <span class="keyword">UNIQUE</span>约束</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [约束名]] 外码约束</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [约束名]] <span class="keyword">CHECK</span>约束</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">DROP</span> &#123;<span class="keyword">CHECK</span><span class="operator">|</span><span class="keyword">CONSTRAINT</span>&#125; 约束名</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">ALTER</span> [<span class="keyword">COLUMN</span>] 列名 &#123;<span class="keyword">SET</span> <span class="keyword">DEFAULT</span> &#123;常量 <span class="operator">|</span> (表达式)&#125; <span class="operator">|</span> <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>&#125;</span><br><span class="line">  <span class="operator">|</span> CHANGE [<span class="keyword">COLUMN</span>] 列名 新列名 数据类型 [列约束]</span><br><span class="line">        [<span class="keyword">FIRST</span> <span class="operator">|</span> AFTER col_name]</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] 列名</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">DROP</span> &#123;INDEX<span class="operator">|</span>KEY&#125; 索引名</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_symbol</span><br><span class="line">  <span class="operator">|</span> MODIFY [<span class="keyword">COLUMN</span>] 列名 数据类型 [列约束]</span><br><span class="line">        [<span class="keyword">FIRST</span> <span class="operator">|</span> AFTER col_name]</span><br><span class="line">  <span class="operator">|</span> RENAME <span class="keyword">COLUMN</span> 列名 <span class="keyword">TO</span> 新列名</span><br><span class="line">  <span class="operator">|</span> RENAME &#123;INDEX<span class="operator">|</span>KEY&#125; 索引名 <span class="keyword">TO</span> 新索引名</span><br><span class="line">  <span class="operator">|</span> RENAME [<span class="keyword">TO</span>] 新表名</span><br></pre></td></tr></table></figure>

</li>
<li><p>sql-service中更改表名使用 exec sp_rename oldname,nername; 语句</p>
</li>
</ul>
<h3 id="跨表查询"><a href="#跨表查询" class="headerlink" title="跨表查询"></a>跨表查询</h3><ul>
<li>select * from t_1,t_2 where()</li>
</ul>
<h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><p> group by 可以将表格按照某些元素聚集起来。如可以将表单中id号相同的人聚集起来，这样方便对某一元素进行集中操作。如查询某一id下所有资产的总和就可以用group by</p>
<h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>order by 可以让数据集按照某个数据的大小进行排序 如果要降序则在最后加上desc</p>
<h3 id="in"><a href="#in" class="headerlink" title="in()"></a>in()</h3><p>in()可以用在筛选数据的where语句中，表示判断某个字段是否在某个数据集中，与之相反的有not in()</p>
<h3 id="limit-a-offset-b"><a href="#limit-a-offset-b" class="headerlink" title="limit a offset b"></a>limit a offset b</h3><p>limit表示将查询的记录分页，每页a条记录，b表示显示第几页的数据</p>
<h3 id="rank-over-…"><a href="#rank-over-…" class="headerlink" title="rank() over(…)"></a>rank() over(…)</h3><p>可以根据over内的排序生成序号,序号为间断的</p>
<h3 id="dense-rank"><a href="#dense-rank" class="headerlink" title="dense_rank()"></a>dense_rank()</h3><p>对结果集进行排序，排名值没有间断。 特定行的排名等于该特定行之前不同排名值的数量加一。</p>
<h3 id="opengauss-返回星期"><a href="#opengauss-返回星期" class="headerlink" title="opengauss 返回星期"></a>opengauss 返回星期</h3><h4 id="几个重要函数"><a href="#几个重要函数" class="headerlink" title="几个重要函数"></a>几个重要函数</h4><ul>
<li>date_part(‘week’,d1) - 日期d1在当年的周次。week(‘2022-2-7’) &#x3D; 6;</li>
<li>extract(DOW FROM cast(d1 as TIMESTAMP) - 返回d1在本周的次序(0 &#x3D; Sunday, 1 &#x3D; Monday, …, 6 &#x3D; Saturday)</li>
<li>case when expr1 then expr2 else expr3 end - 若expr1为TRUE，返回expr2，否则返回expr3.</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>wxml</title>
    <url>/2023/05/02/wxml/</url>
    <content><![CDATA[<h1 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h1><h2 id="wxml负责布局"><a href="#wxml负责布局" class="headerlink" title="wxml负责布局"></a>wxml负责布局</h2><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><p>&lt;view&gt;  相当与<strong>标签</strong>，是用来划分文档内大段的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">view</span>&gt;</span>A<span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中的class表示需要应用的样式。其中样式的编写在wxss中完成。在.wxss中使用.container view{} 来制定该样式下所有的的view的基本样式。使用nth-child(1)来为应用了container内的样式的第一个view增加特质。text-align为view的文本居中</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> view&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>; &lt;!<span class="attr">--px</span>为长度单位--&gt;</span><br><span class="line">  <span class="attribute">text-align</span>: center</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> view<span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若要规定container本身的样式，则需要在wxss中进行设置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line"><span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h3><p>使用<scroll-view class="container" scroll-y> 可以设置滚动效果并且为沿y轴滚动。当container的大小容不下所有的标签组件时可以看到滚动效果</p>
<ol>
<li><p><swiper> 和<swiper-item>可以生成滑块效果。<swiper>下的每一项都是<swiper-item></p>
<p>可以在<swiper-item>下添加<view>模块，模块的样式“item”在wxss中编写。indicator-dots可以添加圆点，autoplay可以让滑块自动播放，interval可以设置自动播放的时间。circular使滑块平滑播放。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">indicator-dots</span> <span class="attr">autoplay</span> <span class="attr">interval</span>=<span class="string">&quot;3000&quot;</span> <span class="attr">circular</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第一个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在wxss中，如果要改变swiper-item的组件的样式，可以使用swiper-item:nth-child(1) .item{}对组件进行修改。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.swiper-container</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">swiper-item<span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) <span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">swiper-item<span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line">swiper-item<span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) <span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;swiper-item在设置的时候前面没有**.**而且.item前面有空格&#x3D;&#x3D;</p>
</li>
<li><p><text>组件可以用来生成文本</p>
</li>
<li><p><bottom>组件可以生成按钮 。type&#x3D;”primary” type&#x3D;”warning”可以改变按钮的颜色</p>
</li>
<li><p><image> 组件可以插入图片。src&#x3D;”\image\1.png”表示图片的路径；mode&#x3D;””为图片的样式。heightFix为保持图片的高不变，改变组件的宽以适应图片。widthFix类似。在wxss中以image{}改变配置</p>
<h2 id="小程序开发的API"><a href="#小程序开发的API" class="headerlink" title="小程序开发的API"></a>小程序开发的API</h2><ul>
<li><p>事件监听API</p>
</li>
<li><p>同步API</p>
</li>
<li><p>异步API</p>
<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2></li>
</ul>
</li>
</ol>
<p>​    在page的js文件的data:中声明变量，在wxml文件中可以使用<code>&#123;&#123;&#125;&#125;</code>进行调用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">       info: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">       imasrc: <span class="string">&#x27;/image/1.6267827695216963E9.jpg&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;imasrc&#125;&#125;&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>小程序中常用事件有</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">绑定方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">tap</td>
<td align="center">bindtap</td>
</tr>
<tr>
<td align="center">input</td>
<td align="center">bindinput</td>
</tr>
<tr>
<td align="center">change</td>
<td align="center">bindchange</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;myTapHandler&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中myTapHandler()函数在js文件中定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myTapHandler</span>(<span class="params">e</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;如果要通过函数改变数据的值，则可以通过setData()函数&#x3D;&#x3D; 注意调用类内的数据时要加上this.data</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">myTapHandler</span>(<span class="params">e</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">myTapHandler1</span>(<span class="params">e</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果需要传递参数，则在wxml中进行定义, 使用 data-**&#x3D;”” 的格式进行传参，可以使用<code>&#123;&#123;&#125;&#125;</code>的语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;myTapHandler1&quot;</span> <span class="attr">data-info</span>=<span class="string">&quot;&#123;&#123;5&#125;&#125;&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在调用的时候使用event.target.dataset找到参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myTapHandler1</span>(<span class="params">event</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">info</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在tap事件中，event.detail包含触碰的位置信息。在input事件中，detail.value为输入的内容，placeholder为输入的提示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">bindinput</span>=<span class="string">&quot;myinput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><b>在input中文本框显示的内容为其value，可以通过改变value改变显示的内容</b></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myinput</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="form组件"><a href="#form组件" class="headerlink" title="form组件"></a>form组件</h3><p>表单。将组件内的用户输入的<a href="https://developers.weixin.qq.com/miniprogram/dev/component/switch.html">switch</a> <a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> <a href="https://developers.weixin.qq.com/miniprogram/dev/component/checkbox.html">checkbox</a> <a href="https://developers.weixin.qq.com/miniprogram/dev/component/slider.html">slider</a> <a href="https://developers.weixin.qq.com/miniprogram/dev/component/radio.html">radio</a> <a href="https://developers.weixin.qq.com/miniprogram/dev/component/picker.html">picker</a> 提交。</p>
<p>当点击 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/form.html">form</a> 表单中 form-type 为 submit 的 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/button.html">button</a> 组件时，会将表单组件中的 value 值进行提交，需要在表单组件中加上 name 来作为 key。</p>
<h2 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">report-submit</td>
<td align="left">boolean</td>
<td align="left">false</td>
<td align="left">否</td>
<td align="left">是否返回 formId 用于发送<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/template-message.html">模板消息</a></td>
</tr>
<tr>
<td align="left">report-submit-timeout</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">否</td>
<td align="left">等待一段时间（毫秒数）以确认 formId 是否生效。如果未指定这个参数，formId 有很小的概率是无效的（如遇到网络失败的情况）。指定这个参数将可以检测 formId 是否有效，以这个参数的时间作为这项检测的超时时间。如果失败，将返回 requestFormId:fail 开头的 formId</td>
</tr>
<tr>
<td align="left">bindsubmit</td>
<td align="left">eventhandle</td>
<td align="left"></td>
<td align="left">否</td>
<td align="left">携带 form 中的数据触发 submit 事件，event.detail &#x3D; {value : {‘name’: ‘value’} , formId: ‘’}</td>
</tr>
<tr>
<td align="left">bindreset</td>
<td align="left">eventhandle</td>
<td align="left"></td>
<td align="left">否</td>
<td align="left">表单重置时会触发 reset 事件</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--点击提交后会执行的函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">bindsubmit</span>=<span class="string">&quot;bntSub&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;value&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">form-type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">form-type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中input组件的name属性决定了该输入在表单中的属性名称</p>
<p>在”bntSub“中可以调用这些信息。信息存储在event.detail.value中，用设定的索引名称去引用</p>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>在小程序中，使用<code>wx:if=&quot;&#123;&#123;condition&#125;&#125;&quot;</code>的方式选择是否渲染模块，类似python，可以使用elif语句</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;count&lt;3&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;myTapHandler1&quot;</span> <span class="attr">data-info</span>=<span class="string">&quot;&#123;&#123;5&#125;&#125;&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">bindinput</span>=<span class="string">&quot;myinput&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123;&#123;count===3&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">text</span>&gt;</span>点击次数达到三次<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;myTapHandler1&quot;</span> <span class="attr">data-info</span>=<span class="string">&quot;&#123;&#123;4&#125;&#125;&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">text</span>&gt;</span>超过三次了<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>block为块，在编译后不需要被渲染</p>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>列表渲染的基本语法是<code>wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;</code>其中每项索引为index，内容为item。如果数组内存着键值，则可以用键值进行遍历。语法为wx:key&#x3D;”keyname”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">索引为&#123;&#123;index&#125;&#125;,内容为&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">class</span>=<span class="string">&quot;radio-group&quot;</span> <span class="attr">bindchange</span>=<span class="string">&quot;radioChange&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;items&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;item.name&#125;&#125;&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;item.checked&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line">    &#123;&#123;item.value&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中radio-group组件中可以包含多个radio选项，可以用来捕捉change事件</p>
<h2 id="弹窗设置"><a href="#弹窗设置" class="headerlink" title="弹窗设置"></a>弹窗设置</h2><p>弹窗组件为modal。 hidden为是否显示的属性，bindconfirm为按确认键后绑定的发生事件。bindcancel为按取消键后的绑定事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modal</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;modalhidden&#125;&#125;&quot;</span> <span class="attr">bindconfirm</span>=<span class="string">&quot;myTapHandler1&quot;</span> <span class="attr">bindcancel</span>=<span class="string">&quot;myTapHandler2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/image/passpart.cc679602.png&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>validateNumber()函数可以验证输入是否为数字</p>
<h2 id="定时函数"><a href="#定时函数" class="headerlink" title="定时函数"></a>定时函数</h2><p>使用setinterval(function(){},timeout)可以设置一个定时函数，函数每隔timeout毫秒执行一次function，在function中无法使用this，因此要在外面设置that&#x3D;this来代替使用。如果想要停止interval，则需要调用clearinterval函数</p>
<h1 id="微信云服务"><a href="#微信云服务" class="headerlink" title="微信云服务"></a>微信云服务</h1><h2 id="数据库的查询"><a href="#数据库的查询" class="headerlink" title="数据库的查询"></a>数据库的查询</h2><p>使用&#x3D;&#x3D;wx.cloud.database&#x3D;&#x3D;函数对数据库进行引用。假设有一个数据库的环境名为“test”，则可以用如下代码获取引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db=wx.<span class="property">cloud</span>.<span class="title function_">database</span>(</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">env</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//为了获取集合，可以使用collection函数，doc可以筛选id</span></span><br><span class="line"><span class="keyword">const</span> todos=db.<span class="title function_">collection</span>(<span class="string">&quot;todos&quot;</span>)</span><br><span class="line">todos.<span class="property">get</span>.<span class="title function_">doc</span>(<span class="string">&quot;_id&quot;</span>)(&#123;</span><br><span class="line">    <span class="attr">success</span>:<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//也可以使用链式调用</span></span><br><span class="line">todos.<span class="title function_">get</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;).<span class="title function_">end</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;&#125;)</span><br><span class="line"><span class="comment">//如果要筛选查询的数据，需要用到where函数</span></span><br><span class="line">todos.<span class="title function_">where</span>(&#123;</span><br><span class="line">    <span class="attr">author</span>:<span class="string">&quot;jack&quot;</span></span><br><span class="line">    <span class="attr">progress</span>: db.<span class="property">command</span>.<span class="title function_">gt</span>(<span class="number">30</span>)</span><br><span class="line">&#125;).<span class="title function_">get</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>常用的查询指令：</p>
<table>
<thead>
<tr>
<th align="left">查询指令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">eq</td>
<td align="left">等于</td>
</tr>
<tr>
<td align="left">neq</td>
<td align="left">不等于</td>
</tr>
<tr>
<td align="left">lt</td>
<td align="left">小于</td>
</tr>
<tr>
<td align="left">lte</td>
<td align="left">小于或等于</td>
</tr>
<tr>
<td align="left">gt</td>
<td align="left">大于</td>
</tr>
<tr>
<td align="left">gte</td>
<td align="left">大于或等于</td>
</tr>
<tr>
<td align="left">in</td>
<td align="left">字段值在给定数组中</td>
</tr>
<tr>
<td align="left">nin</td>
<td align="left">字段值不在给定数组中</td>
</tr>
</tbody></table>
<p>使用where().get()时返回的res.data为满足条件的数组</p>
<p><strong>如果需要随机返回几条满足条件的记录</strong> ：可以使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">List</span> = db.<span class="title function_">collection</span>(<span class="string">&quot;name&quot;</span>).<span class="title function_">aggregate</span>().<span class="title function_">sample</span>(<span class="attr">size</span>:<span class="number">1</span>).<span class="title function_">end</span>()<span class="comment">//返回的对象为一个aggregate，数据储存在List.list里面</span></span><br></pre></td></tr></table></figure>

<h4 id="aggregate-lookup"><a href="#aggregate-lookup" class="headerlink" title="aggregate.lookup()"></a>aggregate.lookup()</h4><p>使用lookup函数可以跨表查询。具体的使用方法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;fav&#x27;</span>).<span class="title function_">aggregate</span>()</span><br><span class="line">			.<span class="title function_">lookup</span>(&#123;</span><br><span class="line">				<span class="attr">from</span>: <span class="string">&#x27;store&#x27;</span>,</span><br><span class="line">				<span class="attr">localField</span>: <span class="string">&#x27;fav_id&#x27;</span>,</span><br><span class="line">				<span class="attr">foreignField</span>: <span class="string">&#x27;_id&#x27;</span>,</span><br><span class="line">				<span class="attr">as</span>: <span class="string">&#x27;storedetail&#x27;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">			.<span class="title function_">match</span>(&#123;</span><br><span class="line">				<span class="attr">_openid</span>: event.<span class="property">userInfo</span>.<span class="property">openId</span></span><br><span class="line">			&#125;)</span><br><span class="line">			.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure>

<p><b>避坑提示：使用云函数的时候，直接返回整个查询结果，不要用promise返回res</b></p>
<h2 id="数据库的插入"><a href="#数据库的插入" class="headerlink" title="数据库的插入"></a>数据库的插入</h2><h3 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h3><p>使用db.collection(“todos”).add()函数可以增加一条数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;todos&#x27;</span>).<span class="title function_">add</span>(&#123;</span><br><span class="line">  <span class="comment">// data 字段表示需新增的 JSON 数据</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&quot;learn cloud database&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2018-09-01&quot;</span>),</span><br><span class="line">    <span class="attr">tags</span>: [</span><br><span class="line">      <span class="string">&quot;cloud&quot;</span>,</span><br><span class="line">      <span class="string">&quot;database&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">location</span>: <span class="keyword">new</span> db.<span class="property">Geo</span>.<span class="title class_">Point</span>(<span class="number">113</span>, <span class="number">23</span>),</span><br><span class="line">    <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//或者用success函数</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;todos&#x27;</span>).<span class="title function_">add</span>(&#123;</span><br><span class="line">  <span class="comment">// data 字段表示需新增的 JSON 数据</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">// _id: &#x27;todo-identifiant-aleatoire&#x27;, // 可选自定义 _id，在此处场景下用数据库自动分配的就可以了</span></span><br><span class="line">    <span class="attr">description</span>: <span class="string">&quot;learn cloud database&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2018-09-01&quot;</span>),</span><br><span class="line">    <span class="attr">tags</span>: [</span><br><span class="line">      <span class="string">&quot;cloud&quot;</span>,</span><br><span class="line">      <span class="string">&quot;database&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 为待办事项添加一个地理位置（113°E，23°N）</span></span><br><span class="line">    <span class="attr">location</span>: <span class="keyword">new</span> db.<span class="property">Geo</span>.<span class="title class_">Point</span>(<span class="number">113</span>, <span class="number">23</span>),</span><br><span class="line">    <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="comment">// res 是一个对象，其中有 _id 字段标记刚创建的记录的 id</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>tips</strong>:使用wx.showLoading函数可以生成加载图像</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&quot;Loading...&quot;</span>,</span><br><span class="line">    <span class="attr">mask</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束加载图片</span></span><br><span class="line">wx.<span class="title function_">hideLoading</span>()</span><br></pre></td></tr></table></figure>



<h3 id="插入一个表单"><a href="#插入一个表单" class="headerlink" title="插入一个表单"></a>插入一个表单</h3><p>使用form组件生成一个表单之后在form的bindsubmit绑定的函数进行表单提交</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">bindsubmit</span>=<span class="string">&quot;mytap&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;num1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid grey;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;op&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid grey;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;num2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid grey;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">form-type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">form-type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mytap</span>(<span class="params">e</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> demo=db.<span class="title function_">collection</span>(<span class="string">&quot;demolist&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span>&#123;num1,op,num2&#125;=e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">    demo.<span class="title function_">add</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">num1</span>:num1,</span><br><span class="line">        <span class="attr">op</span>:op,</span><br><span class="line">        <span class="attr">num2</span>:num2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>  使用update函数可以实现局部更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;todos&#x27;</span>).<span class="title function_">doc</span>(<span class="string">&#x27;todo-identifiant-aleatoire&#x27;</span>).<span class="title function_">update</span>(&#123;</span><br><span class="line">  <span class="comment">// data 传入需要局部更新的数据</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">// 表示将 done 字段置为 true</span></span><br><span class="line">    <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>除了用指定值更新字段外，数据库 API 还提供了一系列的更新指令用于执行更复杂的更新操作，更新指令可以通过 <code>db.command</code> 取得：</p>
<table>
<thead>
<tr>
<th align="left">更新指令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">set</td>
<td align="left">设置字段为指定值</td>
</tr>
<tr>
<td align="left">remove</td>
<td align="left">删除字段</td>
</tr>
<tr>
<td align="left">inc</td>
<td align="left">原子自增字段值</td>
</tr>
<tr>
<td align="left">mul</td>
<td align="left">原子自乘字段值</td>
</tr>
<tr>
<td align="left">push</td>
<td align="left">如字段值为数组，往数组尾部增加指定值</td>
</tr>
<tr>
<td align="left">pop</td>
<td align="left">如字段值为数组，从数组尾部删除一个元素</td>
</tr>
<tr>
<td align="left">shift</td>
<td align="left">如字段值为数组，从数组头部删除一个元素</td>
</tr>
<tr>
<td align="left">unshift</td>
<td align="left">如字段值为数组，往数组头部增加指定值</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = db.<span class="property">command</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;todos&#x27;</span>).<span class="title function_">doc</span>(<span class="string">&#x27;todo-identifiant-aleatoire&#x27;</span>).<span class="title function_">update</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">style</span>: _.<span class="title function_">set</span>(&#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果需要更新多个数据，需在 Server 端进行操作（云函数），在 <code>where</code> 语句后同样的调用 <code>update</code> 方法即可，比如将所有未完待办事项的进度加 10%：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用了 async await 语法</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="keyword">const</span> _ = db.<span class="property">command</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.<span class="title function_">collection</span>(<span class="string">&#x27;todos&#x27;</span>).<span class="title function_">where</span>(&#123;</span><br><span class="line">      <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">update</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">progress</span>: _.<span class="title function_">inc</span>(<span class="number">10</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用command-push指令为数据库的数组增加元素"><a href="#使用command-push指令为数据库的数组增加元素" class="headerlink" title="使用command.push指令为数据库的数组增加元素"></a>使用command.push指令为数据库的数组增加元素</h4><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">each</td>
<td align="left">Array.<any></td>
<td align="left"></td>
<td align="left">是</td>
<td align="left">要插入的所有元素</td>
</tr>
<tr>
<td align="left">position</td>
<td align="left">number</td>
<td align="left"></td>
<td align="left">否</td>
<td align="left">从哪个位置开始插入，不填则是尾部</td>
</tr>
<tr>
<td align="left">sort</td>
<td align="left">number</td>
<td align="left"></td>
<td align="left">否</td>
<td align="left">对结果数组排序</td>
</tr>
<tr>
<td align="left">slice</td>
<td align="left">number</td>
<td align="left"></td>
<td align="left">否</td>
<td align="left">限制结果数组长度</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = db.<span class="property">command</span></span><br><span class="line">db.<span class="title function_">collection</span>(<span class="string">&#x27;todos&#x27;</span>).<span class="title function_">doc</span>(<span class="string">&#x27;doc-id&#x27;</span>).<span class="title function_">update</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">tags</span>: _.<span class="title function_">push</span>([<span class="string">&#x27;mini-program&#x27;</span>, <span class="string">&#x27;cloud&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="监视database的变化"><a href="#监视database的变化" class="headerlink" title="监视database的变化"></a>监视database的变化</h3><p>监听集合中符合查询条件的数据的更新事件。使用 <code>collection.watch</code>函数</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onChange</td>
<td align="left">function</td>
<td align="left"></td>
<td align="left">是</td>
<td align="left">成功回调，回调传入的参数 snapshot 是变更快照，snapshot 定义见下方</td>
</tr>
<tr>
<td align="left">onError</td>
<td align="left">function</td>
<td align="left"></td>
<td align="left">是</td>
<td align="left">失败回调</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">close</td>
<td align="left">function</td>
<td align="left">关闭监听，无需参数，返回 Promise，会在关闭完成时 <code>resolve</code></td>
</tr>
</tbody></table>
<h4 id="snapshot-说明"><a href="#snapshot-说明" class="headerlink" title="snapshot 说明"></a>snapshot 说明</h4><table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">docChanges</td>
<td align="left">ChangeEvent[]</td>
<td align="left">更新事件数组</td>
</tr>
<tr>
<td align="left">docs</td>
<td align="left">object[]</td>
<td align="left">数据快照，表示此更新事件发生后查询语句对应的查询结果</td>
</tr>
<tr>
<td align="left">type</td>
<td align="left">string</td>
<td align="left">快照类型，仅在第一次初始化数据时有值为 init</td>
</tr>
<tr>
<td align="left">id</td>
<td align="left">number</td>
<td align="left">变更事件 id</td>
</tr>
</tbody></table>
<h4 id="ChangeEvent-说明"><a href="#ChangeEvent-说明" class="headerlink" title="ChangeEvent 说明"></a>ChangeEvent 说明</h4><table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">number</td>
<td align="left">更新事件 id</td>
</tr>
<tr>
<td align="left">queueType</td>
<td align="left">string</td>
<td align="left">列表更新类型，表示更新事件对监听列表的影响，枚举值，定义见 QueueType</td>
</tr>
<tr>
<td align="left">dataType</td>
<td align="left">string</td>
<td align="left">数据更新类型，表示记录的具体更新类型，枚举值，定义见 DataType</td>
</tr>
<tr>
<td align="left">docId</td>
<td align="left">string</td>
<td align="left">更新的记录 id</td>
</tr>
<tr>
<td align="left">doc</td>
<td align="left">object</td>
<td align="left">更新的完整记录</td>
</tr>
<tr>
<td align="left">updatedFields</td>
<td align="left">object</td>
<td align="left">所有更新的字段及字段更新后的值，key 为更新的字段路径，value 为字段更新后的值，仅在 <code>update</code> 操作时有此信息</td>
</tr>
<tr>
<td align="left">removedFields</td>
<td align="left">string[]</td>
<td align="left">所有被删除的字段，仅在 <code>update</code> 操作时有此信息</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> player=db.<span class="title function_">collection</span>(<span class="string">&quot;rooms&quot;</span>).<span class="title function_">doc</span>(docid).<span class="title function_">watch</span>(&#123;</span><br><span class="line">     <span class="attr">onError</span>:<span class="function"><span class="params">error</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(error)&#125;,</span><br><span class="line">     <span class="attr">onChange</span>: <span class="function"><span class="params">snapshot</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(snapshot.<span class="property">docChanges</span>[<span class="number">0</span>].<span class="property">dataType</span>==<span class="string">&quot;update&quot;</span>&amp;&amp;snapshot.<span class="property">docs</span>[<span class="number">0</span>].<span class="property">peoplenum</span>==<span class="number">2</span>)</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;匹配成功&quot;</span>)</span><br><span class="line">          player.<span class="title function_">close</span>()</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">communi</span>()</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)	</span><br></pre></td></tr></table></figure>



<h2 id="云函数的创建"><a href="#云函数的创建" class="headerlink" title="云函数的创建"></a>云函数的创建</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;) <span class="comment">// 使用当前云环境</span></span><br><span class="line"><span class="keyword">const</span> db=cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  db.<span class="title function_">collection</span>(event.<span class="property">collection</span>).<span class="title function_">doc</span>(event.<span class="property">docid</span>).<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">      <span class="attr">peoplenum</span>:event.<span class="property">peoplenum</span>,</span><br><span class="line">      <span class="attr">enable</span>:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="wx-createSelectorQuery"><a href="#wx-createSelectorQuery" class="headerlink" title="wx.createSelectorQuery()"></a>wx.createSelectorQuery()</h2><p>在js页面进行组件的交互</p>
<h1 id="微信小程序官方文档"><a href="#微信小程序官方文档" class="headerlink" title="微信小程序官方文档"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/aggregate/Aggregate.lookup.html">微信小程序官方文档</a></h1>]]></content>
      <tags>
        <tag>前端学习</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>tes1</title>
    <url>/2023/05/02/tes1/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
